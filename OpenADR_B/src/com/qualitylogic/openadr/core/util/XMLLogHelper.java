package com.qualitylogic.openadr.core.util;

import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.io.StringWriter;
import java.nio.channels.FileLock;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import com.qualitylogic.openadr.core.common.TestSession;

public class XMLLogHelper {

	private XMLLogHelper domUtil = null;
	private Document xmlDom = null;
	private Element log = null;
	private String logPath = null;
	private String logFileName = null;

	private XMLLogHelper() {
	}

	private synchronized void addTrace(Trace trace) {
		PropertiesFileReader propertiesFileReader = new PropertiesFileReader();

		logPath = propertiesFileReader.getLogPath();
		logFileName = propertiesFileReader.getlogFileName();
		
		RandomAccessFile lockFile = null;
		FileLock lock = null;
		try {
			lockFile = new RandomAccessFile(logPath + logFileName + ".lock", "rw");
			lock = lockFile.getChannel().lock();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		xmlDom = parse(logPath + logFileName);

		log = xmlDom.getDocumentElement();

		if (trace == null)
			return;
		Element traceNode = xmlDom.createElement("trace");
		if (trace.getTestCaseName() != null)
			traceNode.setAttribute("testCaseName", trace.getTestCaseName());
		if (trace.getTestStartTime() != null)
			traceNode.setAttribute("testStartTime", trace.getTestStartTime());
		if (trace.getTestEndTime() != null)
			traceNode.setAttribute("testEndTime", trace.getTestEndTime());
		if (trace.getResult() != null)
			traceNode.setAttribute("result", trace.getResult());
		if (trace.getLogFileName() != null)
			traceNode.setAttribute("logFileName", trace.getLogFileName());

		log.appendChild(traceNode);

		writeXmlToFile(logPath + logFileName, xmlDom);
		
		try {
			if (lock != null) {
				lock.release();
			}
			
			if (lockFile != null) {
				lockFile.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			writeStyleFiles();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Parse the XML file and create Document
	 * 
	 * @param fileName
	 * @return Document
	 */
	private Document parse(String fileName) {
		Document document = null;
		// Initiate DocumentBuilderFactory
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

		// To get a validating parser
		factory.setValidating(false);
		// To get one that understands namespaces
		factory.setNamespaceAware(true);

		try {
			// Get DocumentBuilder
			DocumentBuilder builder = factory.newDocumentBuilder();
			// Parse and load into memory the Document

			File logFileObj = new File(fileName);

			// writeXmlToFile(
			if (!logFileObj.exists()) {
				String fileTemplate = "<?xml version='1.0' encoding='UTF-8' standalone='no'?><?xml-stylesheet type='text/xsl' href='logStyle.xsl'?><log></log>";
				FileWriter outFile = new FileWriter(fileName);
				PrintWriter out = new PrintWriter(outFile);
				out.write(fileTemplate);
				out.close();
				// logFileObj.
			}
			document = builder.parse(new File(fileName));

			return document;

		} catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println("\n** Parsing error , line "
					+ spe.getLineNumber() + ", uri " + spe.getSystemId());
			System.out.println(" " + spe.getMessage());
			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();

			String exceptionMessage = "An SAXParseException exception occurred.";
			OadrUtil.exceptionHandler(x, exceptionMessage);

		} catch (SAXException sxe) {
			// Error generated during parsing
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			String exceptionMessage = "An SAXParseException exception occurred.";
			OadrUtil.exceptionHandler(x, exceptionMessage);
		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			String exceptionMessage = "An ParserConfigurationException exception occurred.";
			OadrUtil.exceptionHandler(pce, exceptionMessage);

		} catch (IOException ioe) {
			// I/O error
			String exceptionMessage = "An IOException exception occurred.";
			OadrUtil.exceptionHandler(ioe, exceptionMessage);
		}

		return null;
	}

	/**
	 * This method writes a DOM document to a file
	 * 
	 * @param filename
	 * @param document
	 */
	private void writeXmlToFile(String filename, Document document) {
		try {
			// Prepare the DOM document for writing
			Source source = new DOMSource(document);

			// Prepare the output file
			File file = new File(filename);
			Result result = new StreamResult(file);

			// Write the DOM document to the file
			// Get Transformer
			Transformer xformer = TransformerFactory.newInstance()
					.newTransformer();
			// Write to a file
			xformer.transform(source, result);
		} catch (TransformerConfigurationException e) {
			System.out.println("TransformerConfigurationException: " + e);
		} catch (TransformerException e) {
			System.out.println("TransformerException: " + e);
		}
	}

	/**
	 * Count Elements in Document by Tag Name
	 * 
	 * @param tag
	 * @param document
	 * @return number elements by Tag Name
	 */
	private int countByTagName(String tag, Document document) {
		NodeList list = document.getElementsByTagName(tag);
		return list.getLength();
	}

	private String getUniqueFileName() {
		SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyy_hhmmss_SSS");
		return dateFormat.format(new Date());
	}

	private static void writeTraceToFile(Trace trace) {
		PropertiesFileReader propertiesFileReader = new PropertiesFileReader();
		ResourceFileReader resourceFileReader = new ResourceFileReader();
		StringBuffer traceFileContent = new StringBuffer();

		if (trace != null) {
			traceFileContent.append("Test Case Name : "
					+ trace.getTestCaseName());
			traceFileContent.append("\n");
			if (resourceFileReader.TestCase_Intent_Description().isEmpty() == false) {
				traceFileContent.append(resourceFileReader
						.TestCase_Intent_Description());
				traceFileContent.append("\n");
			}
			traceFileContent.append("Test Start Time : "
					+ trace.getTestStartTime());
			traceFileContent.append("\n");
			traceFileContent.append("Test End Time : "
					+ trace.getTestStartTime());
			traceFileContent.append("\n");
			if (propertiesFileReader.get("Report_Header_Info_1").isEmpty() == false) {
				traceFileContent.append(propertiesFileReader
						.get("Report_Header_Info_1"));
				traceFileContent.append("\n");
			}
			if (propertiesFileReader.get("Report_Header_Info_2").isEmpty() == false) {
				traceFileContent.append(propertiesFileReader
						.get("Report_Header_Info_2"));
				traceFileContent.append("\n");
			}
			if (propertiesFileReader.get("Report_Header_Info_3").isEmpty() == false) {
				traceFileContent.append(propertiesFileReader
						.get("Report_Header_Info_3"));
				traceFileContent.append("\n");
			}
			
			traceFileContent
					.append("\n--------------------------------------\n");
			traceFileContent.append(trace.getLogFileContentTrace());
		}

		String filename = propertiesFileReader.getLogPath() + trace.getLogFileName();
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(filename));

			out.write(traceFileContent.toString());
			out.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		boolean autoOpenLogfile = propertiesFileReader.isTestOpenLog();
		if (autoOpenLogfile && Desktop.isDesktopSupported()) {
			try {
				Desktop desktop = Desktop.getDesktop();
				desktop.open(new File(filename));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private void writeStyleFiles() throws IOException {
		String xslContent = getStyleContent("logStyle.xsl");
		String cssContent = getStyleContent("logcss.css");

		BufferedWriter outXSLstyle = new BufferedWriter(new FileWriter(logPath
				+ "logStyle.xsl"));
		outXSLstyle.write(xslContent);
		outXSLstyle.close();

		BufferedWriter cssstyle = new BufferedWriter(new FileWriter(logPath
				+ "logcss.css"));
		cssstyle.write(cssContent);
		cssstyle.close();
	}

	private String getStyleContent(String filename) {
		String content = "";
		InputStream inputStream = this
				.getClass()
				.getClassLoader()
				.getResourceAsStream(
						"com/qualitylogic/openadr/core/style/" + filename);
		StringWriter writer = new StringWriter();
		try {

			IOUtils.copy(inputStream, writer);
			content = writer.toString();

		} catch (IOException e) {
			e.printStackTrace();
		}

		return content;
	}

	public static void writeTestLog(String testCaseName){
		Trace trace = TestSession.getTraceObj();
		if (trace != null) {
			trace.setTestEndTime(new Date().toString());
			
			XMLLogHelper.writeTraceToFile(trace);
			
			XMLLogHelper xmlLogHelper = new XMLLogHelper();
			xmlLogHelper.addTrace(trace);
			System.out.print("\nTestCase Result Status: " + trace.getResult() + "\n");
		}
		
		if (StringUtils.isNotBlank(testCaseName)) {
			System.out.print("\nStopped " + testCaseName + " at " + new Date() + "\n");
		}
	}
}
